{"ast":null,"code":"var _jsxFileName = \"/Users/mkdarche/Desktop/nft-robots/react-robot-web/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Chance from 'chance';\nimport { Global } from '@emotion/react';\nimport { ReactComponent as DevieBot } from \"@svgr/webpack?-svgo,+titleProp,+ref!./assets/D_DDeviebot_stuffed.svg\";\nimport { ReactComponent as JohnnyBot } from \"@svgr/webpack?-svgo,+titleProp,+ref!./assets/D_DJohnnybot_stuffed.svg\";\nimport { ReactComponent as MaggieBot } from \"@svgr/webpack?-svgo,+titleProp,+ref!./assets/D_DMaggiebot_stuffed.svg\";\nimport { ReactComponent as SwervieBot } from \"@svgr/webpack?-svgo,+titleProp,+ref!./assets/D_DSwerviebot_stuffed.svg\";\nimport { bg, bg_rarity, base, base_rarity, color, color_rarity, arm, arm_rarity, chest, chest_rarity } from './rarity';\nimport { containsObject, formatMetadata } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar chance = new Chance();\nconst bots = {\n  Devie: /*#__PURE__*/_jsxDEV(DevieBot, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this),\n  Johnny: /*#__PURE__*/_jsxDEV(JohnnyBot, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 11\n  }, this),\n  Maggie: /*#__PURE__*/_jsxDEV(MaggieBot, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 11\n  }, this),\n  Swervie: /*#__PURE__*/_jsxDEV(SwervieBot, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 12\n  }, this)\n};\n\nfunction App() {\n  _s();\n\n  const [tokenCount, setTokenCount] = useState(0);\n  const [combinations, setCombinations] = useState([]);\n  const [traits, setTraits] = useState({\n    base: 'Devie',\n    chest: 'lightbulb',\n    arms: 'thick',\n    color: 'gray',\n    background: 'blue'\n  });\n  /**\n   * Uses rarity table to create a set of Traits and confirm\n   * that the combination is unique\n   */\n\n  const generateBot = e => {\n    const bot = {\n      base: chance.weighted(base, base_rarity),\n      background: chance.weighted(bg, bg_rarity),\n      color: chance.weighted(color, color_rarity),\n      arms: chance.weighted(arm, arm_rarity),\n      chest: chance.weighted(chest, chest_rarity)\n    };\n    const isUnique = !containsObject(bot, combinations);\n\n    if (combinations.length && !isUnique) {\n      // If combo already exists, recursively call this function to generate a new bot\n      generateBot();\n    } else {\n      // Else save it to local state, append to combo history, and increment token ID\n      setTraits(bot);\n      setCombinations([...combinations, bot]);\n      setTokenCount(tokenCount + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Global, {\n      styles: {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"workspace\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"dock\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Robot Generator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"generate-btn\",\n          onClick: generateBot,\n          children: \"Generate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"robot-count\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Unique Robots:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: tokenCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"traits\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Current Traits:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trait-container\",\n            children: /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: JSON.stringify(traits, null, ' ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metadata\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Metadata:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trait-container\",\n            children: JSON.stringify(formatMetadata(traits), null, ' ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"art-preview\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"art-container\",\n          children: bots[traits.base]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"3Br6AA3YgcWeZk8QvOyJOaPEmQw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mkdarche/Desktop/nft-robots/react-robot-web/src/App.tsx"],"names":["React","useState","Chance","Global","bg","bg_rarity","base","base_rarity","color","color_rarity","arm","arm_rarity","chest","chest_rarity","containsObject","formatMetadata","chance","bots","Devie","Johnny","Maggie","Swervie","App","tokenCount","setTokenCount","combinations","setCombinations","traits","setTraits","arms","background","generateBot","e","bot","weighted","isUnique","length","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Chance from 'chance';\nimport { Global } from '@emotion/react';\n\nimport type { Traits } from './types';\nimport { ReactComponent as DevieBot } from './assets/D_DDeviebot_stuffed.svg';\nimport { ReactComponent as JohnnyBot } from './assets/D_DJohnnybot_stuffed.svg';\nimport { ReactComponent as MaggieBot } from './assets/D_DMaggiebot_stuffed.svg';\nimport { ReactComponent as SwervieBot } from './assets/D_DSwerviebot_stuffed.svg';\nimport {\n  bg,\n  bg_rarity,\n  base,\n  base_rarity,\n  color,\n  color_rarity,\n  arm,\n  arm_rarity,\n  chest,\n  chest_rarity,\n} from './rarity';\nimport { containsObject, formatMetadata } from './utils';\n\nvar chance = new Chance();\n\nconst bots = {\n  Devie: <DevieBot />,\n  Johnny: <JohnnyBot />,\n  Maggie: <MaggieBot />,\n  Swervie: <SwervieBot />,\n};\n\nfunction App() {\n  const [tokenCount, setTokenCount] = useState(0);\n  const [combinations, setCombinations] = useState<Traits[]>([]);\n  const [traits, setTraits] = useState<Traits>({\n    base: 'Devie',\n    chest: 'lightbulb',\n    arms: 'thick',\n    color: 'gray',\n    background: 'blue',\n  });\n\n  /**\n   * Uses rarity table to create a set of Traits and confirm\n   * that the combination is unique\n   */\n\n  const generateBot = (e?: React.MouseEvent) => {\n    const bot: Traits = {\n      base: chance.weighted(base, base_rarity),\n      background: chance.weighted(bg, bg_rarity),\n      color: chance.weighted(color, color_rarity),\n      arms: chance.weighted(arm, arm_rarity),\n      chest: chance.weighted(chest, chest_rarity),\n    };\n\n    const isUnique = !containsObject(bot, combinations);\n\n    if (combinations.length && !isUnique) {\n      // If combo already exists, recursively call this function to generate a new bot\n      generateBot();\n    } else {\n      // Else save it to local state, append to combo history, and increment token ID\n      setTraits(bot);\n      setCombinations([...combinations, bot]);\n      setTokenCount(tokenCount + 1);\n    }\n  };\n\n  return (\n    <>\n      <Global styles={{}} />\n      <div id=\"workspace\">\n        <div id=\"dock\">\n          <h1>Robot Generator</h1>\n          <button className=\"generate-btn\" onClick={generateBot}>\n            Generate\n          </button>\n          <div className=\"robot-count\">\n            <h4>Unique Robots:</h4>\n            <div>{tokenCount}</div>\n          </div>\n          <div className=\"traits\">\n            <h4>Current Traits:</h4>\n            <div className=\"trait-container\">\n              <pre>{JSON.stringify(traits, null, ' ')}</pre>\n            </div>\n          </div>\n          <div className=\"metadata\">\n            <h4>Metadata:</h4>\n            <div className=\"trait-container\">\n              {JSON.stringify(formatMetadata(traits), null, ' ')}\n            </div>\n          </div>\n        </div>\n        <div id=\"art-preview\">\n          <div className=\"art-container\">{bots[traits.base]}</div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}