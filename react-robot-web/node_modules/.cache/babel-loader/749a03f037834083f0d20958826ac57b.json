{"ast":null,"code":"/**\n * Format trait config object into OpenSea compatible `attributes` metadata\n * @link https://docs.opensea.io/docs/metadata-standards\n *\n * @param config\n * @returns array of attributes in metadata object\n */\nexport function formatMetadata(config) {\n  let attributes = [];\n\n  for (const [key, value] of Object.entries(config)) {\n    attributes.push({\n      trait_type: key,\n      value\n    });\n  }\n\n  return {\n    attributes\n  };\n}\n/**\n * Utility function to check if object is unique inside an array of objects\n * @param obj the target object\n * @param list the array of objects for comparison\n * @returns boolean\n */\n\nexport function containsObject(obj, list) {\n  var i;\n\n  for (i = 0; i < list.length; i++) {\n    if (list[i] === obj) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/mkdarche/Desktop/nft-robots/react-robot-web/src/utils.ts"],"names":["formatMetadata","config","attributes","key","value","Object","entries","push","trait_type","containsObject","obj","list","i","length"],"mappings":"AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,cAAT,CAAwBC,MAAxB,EAAwC;AAC7C,MAAIC,UAAsB,GAAG,EAA7B;;AAEA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeL,MAAf,CAA3B,EAAmD;AACjDC,IAAAA,UAAU,CAACK,IAAX,CAAgB;AAAEC,MAAAA,UAAU,EAAEL,GAAd;AAAmBC,MAAAA;AAAnB,KAAhB;AACD;;AACD,SAAO;AAAEF,IAAAA;AAAF,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASO,cAAT,CAAwBC,GAAxB,EAAqCC,IAArC,EAAqD;AAC1D,MAAIC,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,IAAI,CAACE,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChC,QAAID,IAAI,CAACC,CAAD,CAAJ,KAAYF,GAAhB,EAAqB;AACnB,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { Traits } from './types';\n\ninterface Metadata {\n  trait_type: string;\n  value: string;\n}\n\n/**\n * Format trait config object into OpenSea compatible `attributes` metadata\n * @link https://docs.opensea.io/docs/metadata-standards\n *\n * @param config\n * @returns array of attributes in metadata object\n */\n\nexport function formatMetadata(config: Traits) {\n  let attributes: Metadata[] = [];\n\n  for (const [key, value] of Object.entries(config)) {\n    attributes.push({ trait_type: key, value });\n  }\n  return { attributes };\n}\n\n/**\n * Utility function to check if object is unique inside an array of objects\n * @param obj the target object\n * @param list the array of objects for comparison\n * @returns boolean\n */\n\nexport function containsObject(obj: object, list: object[]) {\n  var i;\n  for (i = 0; i < list.length; i++) {\n    if (list[i] === obj) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}